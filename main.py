# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ª–µ–∂–∏—Ç –≤ /lib/systemd/system/catbot.service
# –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ systemctl restart catbot.service

import logging
import html
import json
import traceback
import random
import re
import pathlib

import cat  # –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ —Å —Ä–µ–ø–ª–∏–∫–∞–º–∏ –∫–æ—Ç–∞
from config import bot, worksheet, TOKEN, ADMIN_CHAT, SBOR_CHAT, CHECK_CHAT, DEV_CHAT, LOGFILE  # –ò–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler, ConversationHandler, PicklePersistence

from keyboards import keyboard_change, keyboard_delete
from errors import error_answer, error_order, error_done, error_add


# –õ–æ–≥–∏–Ω–≥ –ª–æ–≥–æ–≤
#logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO, filename = "/cometovart/catbot/log_test.log")
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO, filename = LOGFILE)
logger = logging.getLogger(__name__)

#callback_data
DELETE, ADD, DONE = range(3)


bot.send_message(DEV_CHAT, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
def start(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    update.message.reply_markdown_v2(
        fr'–ü—Ä–∏–≤–µ—Ç {user.mention_markdown_v2()}\! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –º–æ–≥ —Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º –∏–∑ @FoodfoxCourierBot',
    )


# –ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
def order_user(update: Update, context: CallbackContext) -> None:
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
    msg = update.message.text
    user = update.message.from_user.username
    time = update.message.date.strftime("%H:%M")
    strings = re.findall(r'\n', msg)
    order = re.search(r'\d{6}-\d{6}', msg)
    time_end = re.search(r'\d\d:\d\d', msg)
    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
    text = (
        f'*–£—Å–ø–µ—Ö–æ–≤ –≤ —Å–±–æ—Ä—Ä—Ä–∫–µ –∑–∞–∫–∞–∑–∞ {order.group(0)}!* üòΩ\n\n'
        f'–ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä—ë—à—å –∑–∞–∫–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–∏–π\n\n'
        f'–ù–∞–∂–º–∏ *¬´+ –ø–æ–∑–∏—Ü–∏—è¬ª* –µ—Å–ª–∏ —É —Ç–µ–±—è –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ø–æ–∑–∏—Ü–∏–∏\n'
        f'–ù–∞–∂–º–∏ *¬´–û—Ç–º–µ–Ω–∞¬ª* –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–∏–ª—Å—è\n'
        f'–ù–∞–ø–∏—à–∏ *¬´+1¬ª* —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –∫ –∑–∞–∫–∞–∑—É\n\n'
        f'–ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–π –Ω–µ–±—ã–ª–æ, —Ç–æ –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞!'
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —á–∞—Ç –∏ —Ç–∞–±–ª–∏—Ü—É
    update.message.reply_text(text, parse_mode='markdown', reply_markup=InlineKeyboardMarkup(keyboard_delete))
    val = worksheet.cell(3, 15).value # –Ω–æ–º–µ—Ä —Å–≤–æ–±–æ–¥–Ω–æ–π —è—á–µ–π–∫–∏
    worksheet.update_cell(val, 2, order.group(0)) # –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∫–∞
    worksheet.update_cell(val, 3, user) # –Ω–∏–∫ —Å–±–æ—Ä—â–∏–∫–∞
    worksheet.update_cell(val, 4, time) # –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∫–∏
    worksheet.update_cell(val, 6, len(strings)-13) # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
    worksheet.update_cell(val, 13, time_end.group(0)) # –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
    admin_reload(update, context)

    return DELETE


# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
def delete_answer(update: Update, context: CallbackContext) -> None:
    try:
        check_callback = update.callback_query.data
    except:
        delete = update.effective_message.text
        msg = update.message
        user = msg.from_user.username
    else:
        update.callback_query.answer()
        delete = check_callback
        msg = update.effective_message
        user = update.effective_user.username
    text = (
        f'*–Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–∏ —É–¥–∞–ª–µ–Ω–∏—è!* üñç\n\n–¢–µ–ø–µ—Ä—å –∂–¥—É —Ñ–æ—Ç–æ —á–µ–∫–∞ ;)\n'
        f'_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –µ–≥–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–µ—à—å_'
    )
    msg.reply_text(text, parse_mode='markdown', reply_markup=InlineKeyboardMarkup(keyboard_change))
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
    scan = worksheet.findall(user)[-1] # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
    worksheet.update_cell(scan.row, 7, delete)

    return DONE


# –û—Ç–≤–µ—Ç –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
def none_answer_query(update: Update, context: CallbackContext) -> None:
    update.callback_query.answer()
    delete = update.callback_query.data # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–∏–π
    text = (
        f'*–ó–∞–º—É—Ä—Ä—Ä—Ä—Ä—á–∞—Ç–µ–ª—å–Ω–æ! –¢—ã –º–æ–ª–æ–¥—á–∏–Ω–∞!* \n\n–¢–µ–ø–µ—Ä—å –∂–¥—É —Ñ–æ—Ç–æ —á–µ–∫–∞ ;)\n'
        f'_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –µ–≥–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–µ—à—å_\n\n'
        f'–î–µ—Ä–∂–∏ –∫–æ—Ç–µ–π–∫—É –∑–∞ —Å—Ç–∞—Ä–∞–Ω–∏—è üò∏'
    )
    update.effective_message.reply_text(text, parse_mode='markdown', reply_markup=InlineKeyboardMarkup(keyboard_change))
    random_sticker = lambda: random.choice(cat.sticker_cat)
    update.effective_message.reply_sticker(sticker=random_sticker())
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
    user = update.effective_user.username
    scan = worksheet.findall(user)[-1] # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
    worksheet.update_cell(scan.row, 7, delete)

    return DONE


# –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
def add_pos(update: Update, context: CallbackContext) -> None:
    update.callback_query.answer()
    text = (
        f'–£ —Ç–µ–±—è –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ø–æ–∑–∏—Ü–∏–∏, –æ—Ç–ª–∏—á–Ω–æ!\n\n'
        f'–ü—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–∫–æ–ª—å–∫–æ –∏—Ö —É —Ç–µ–±—è'
    )
    update.effective_message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard_change))

    return ADD


# –û—Ç–≤–µ—Ç –Ω–∞ —É—Å–ø–µ—à–Ω—é –∑–∞–ø–∏—Å—å
def add_answer(update: Update, context: CallbackContext) -> None:
    add = update.effective_message.text # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π
    text = (
        f'–Ø –∑–∞–ø–∏—Å–∞–ª –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ;) –¢–µ–ø–µ—Ä—å –∂–¥—É —Ñ–æ—Ç–æ —á–µ–∫–∞\n'
        f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –µ–≥–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–µ—à—å'
    )
    update.effective_message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard_change))
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
    numb = f'-{add}'
    user = update.message.from_user.username
    scan = worksheet.findall(user)[-1] # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
    worksheet.update_cell(scan.row, 7, numb)

    return DONE


# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–¥–∞–ª–µ–Ω–∏—è–º
def delete_back(update: Update, context: CallbackContext) -> None:
    update.callback_query.answer()
    text = (
        f'–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –µ—â–µ —Ä–∞–∑ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–∏–π:'
    )
    update.effective_message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard_delete))

    return DELETE


# –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Ç—ã
def add_min(update: Update, context: CallbackContext) -> None:
    min = re.search('\d{1,2}', update.effective_message.text) # —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ–±–∞–≤–∏–ª–æ—Å—å
    text = (
        f'–Ø –¥–æ–±–∞–≤–∏–ª –∫ —Ç–≤–æ–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ {min.group(0)} –º–∏–Ω—É—Ç. –ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –∫–Ω–æ–ø–∫–µ, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–∏–π —Ü–∏—Ñ—Ä–æ–π.'
    )
    update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard_delete))
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
    user = update.effective_user.username
    scan = worksheet.findall(user)[-1] # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
    worksheet.update_cell(scan.row, 14, min.group(0))

    return DELETE


# –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
def done(update: Update, context: CallbackContext) -> None:
    user = update.effective_user.username
    time = update.effective_message.date.strftime("%H:%M")
    scan = worksheet.findall(user)[-1]
    worksheet.update_cell(scan.row, 8, time)
    val = worksheet.get('A{}:S{}'.format(scan.row, scan.row))
    text = (
        f'*–ó–∞–∫–∞–∑ {val[0][1]} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!* –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∑–∞–∫–∞–∑:\n'
        f'üõí –ö–æ—Ä–∑–∏–Ω–∞: *{val[0][10]}*, ‚è≥ –í—Ä–µ–º—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: *{val[0][11]}*\n\n'
        f'–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n'
        f'üõí –ö–æ—Ä–∑–∏–Ω–∞: *{val[0][16]}*, ‚è≥ –í—Ä–µ–º—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: *{val[0][17]}*, üíµ –°—Ç–∞–≤–∫–∞: *{val[0][18]}*—Ä\n\n'
        f'–ü–µ—Ä–µ—Å—ã–ª–∞–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–¥—ë—Ç :)'
    )
    text_order = (
        f'–ß–µ–∫ –ø–æ –∑–∞–∫–∞–∑—É {val[0][1]}:'
    )
    update.effective_message.reply_text(text, parse_mode='markdown')
    bot.send_message(CHECK_CHAT, text_order)
    update.message.forward(CHECK_CHAT)
    admin_reload(update, context)

    return ConversationHandler.END


# –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ —á–µ–∫–∞
def done_photo(update: Update, context: CallbackContext) -> None:
    user = update.effective_user.username
    time = update.effective_message.date.strftime("%H:%M")
    scan = worksheet.findall(user)[-1]
    worksheet.update_cell(scan.row, 7, "0")
    worksheet.update_cell(scan.row, 8, time)
    val = worksheet.get('A{}:S{}'.format(scan.row, scan.row))
    text = (
        f'*–ó–∞–∫–∞–∑ {val[0][1]} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!* –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∑–∞–∫–∞–∑:\n'
        f'üõí –ö–æ—Ä–∑–∏–Ω–∞: *{val[0][10]}*, ‚è≥ –í—Ä–µ–º—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: *{val[0][11]}*\n\n'
        f'–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n'
        f'üõí –ö–æ—Ä–∑–∏–Ω–∞: *{val[0][16]}*, ‚è≥ –í—Ä–µ–º—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: *{val[0][17]}*, üíµ –°—Ç–∞–≤–∫–∞: *{val[0][18]}*—Ä\n\n'
        f'–î–µ—Ä–∂–∏ –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—Ç–µ–π–∫—É –∑–∞ –∑–∞–∫–∞–∑ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏–π üòª'
    )
    text_order = (
        f'–ß–µ–∫ –ø–æ –∑–∞–∫–∞–∑—É {val[0][1]}:'
    )
    update.effective_message.reply_text(text, parse_mode='markdown')
    random_sticker = lambda: random.choice(cat.sticker_cat)
    update.effective_message.reply_sticker(sticker=random_sticker())
    bot.send_message(CHECK_CHAT, text_order)
    update.message.forward(CHECK_CHAT)
    admin_reload(update, context)

    return ConversationHandler.END


# –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
def stop(update: Update, context: CallbackContext) -> None:
    text = (
        f'–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ñ–¥—É —Å–ª–µ–¥—É—é—â–µ–≥–æ ;)'
    )
    update.message.reply_text(text)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
    user = update.message.from_user.username
    scan = worksheet.findall(user)[-1] # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
    worksheet.update_cell(scan.row, 10, "–û—Ç–º–µ–Ω–∞")
    admin_reload(update, context)

    return ConversationHandler.END


# –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –ø–æ –∫–Ω–æ–ø–∫–µ
def stop_query(update: Update, context: CallbackContext) -> None:
    update.callback_query.answer()
    text = (
        f'–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ñ–¥—É —Å–ª–µ–¥—É—é—â–µ–≥–æ ;)'
    )
    update.effective_message.reply_text(text)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
    user = update.effective_user.username
    scan = worksheet.findall(user)[-1] # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
    worksheet.update_cell(scan.row, 10, "–û—Ç–º–µ–Ω–∞")
    admin_reload(update, context)

    return ConversationHandler.END


# –í—ã–¥–∞—ë–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
def stat(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user.username
    scan = worksheet.findall(user)[-1]
    val = worksheet.get('Q{}:S{}'.format(scan.row, scan.row))
    text = (
        f'–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n'
        f'–ö–æ—Ä–∑–∏–Ω–∞: {val[0][0]}, –í—Ä–µ–º—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: {val[0][1]}, –°—Ç–∞–≤–∫–∞: {val[0][2]}—Ä\n\n'
    )
    update.effective_message.reply_text(text)


# –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ –∞–¥–º–∏–Ω–∫—É
def admin_reload(update: Update, context: CallbackContext) -> None:
    val = worksheet.get("V1:AA20")
    if val[0][4] == "0":
        orders = f'–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ üò±'
    elif val[0][4] == "1":
        orders = f'{val[1][3]} ‚Äî {val[1][4]} [{val[1][5]}]'
    elif val[0][4] == "2":
        orders = f'{val[1][3]} ‚Äî {val[1][4]} [{val[1][5]}]\n{val[2][3]} ‚Äî {val[2][4]} [{val[2][5]}]'
    elif val[0][4] == "3":
        orders = f'{val[1][3]} ‚Äî {val[1][4]} [{val[1][5]}]\n{val[2][3]} ‚Äî {val[2][4]} [{val[2][5]}]\n{val[3][3]} ‚Äî {val[3][4]} [{val[3][5]}]'
    elif val[0][4] == "4":
        orders = f'{val[1][3]} ‚Äî {val[1][4]} [{val[1][5]}]\n{val[2][3]} ‚Äî {val[2][4]} [{val[2][5]}]\n{val[3][3]} ‚Äî {val[3][4]} [{val[3][5]}]\n{val[4][3]} ‚Äî {val[4][4]} [{val[4][5]}]'
    elif val[0][4] == "5":
        orders = f'{val[1][3]} ‚Äî {val[1][4]} [{val[1][5]}]\n{val[2][3]} ‚Äî {val[2][4]} [{val[2][5]}]\n{val[3][3]} ‚Äî {val[3][4]} [{val[3][5]}]\n{val[4][3]} ‚Äî {val[4][4]} [{val[4][5]}]\n{val[5][3]} ‚Äî {val[5][4]} [{val[5][5]}]'
    elif val[0][4] == "6":
        orders = f'{val[1][3]} ‚Äî {val[1][4]} [{val[1][5]}]\n{val[2][3]} ‚Äî {val[2][4]} [{val[2][5]}]\n{val[3][3]} ‚Äî {val[3][4]} [{val[3][5]}]\n{val[4][3]} ‚Äî {val[4][4]} [{val[4][5]}]\n{val[5][3]} ‚Äî {val[5][4]} [{val[5][5]}]\n{val[6][3]} ‚Äî {val[6][4]} [{val[6][5]}]'
    elif val[0][4] == "7":
        orders = f'{val[1][3]} ‚Äî {val[1][4]} [{val[1][5]}]\n{val[2][3]} ‚Äî {val[2][4]} [{val[2][5]}]\n{val[3][3]} ‚Äî {val[3][4]} [{val[3][5]}]\n{val[4][3]} ‚Äî {val[4][4]} [{val[4][5]}]\n{val[5][3]} ‚Äî {val[5][4]} [{val[5][5]}]\n{val[6][3]} ‚Äî {val[6][4]} [{val[6][5]}]\n{val[7][3]} ‚Äî {val[7][4]} [{val[7][5]}]'
    elif val[0][4] == "8":
        orders = f'{val[1][3]} ‚Äî {val[1][4]} [{val[1][5]}]\n{val[2][3]} ‚Äî {val[2][4]} [{val[2][5]}]\n{val[3][3]} ‚Äî {val[3][4]} [{val[3][5]}]\n{val[4][3]} ‚Äî {val[4][4]} [{val[4][5]}]\n{val[5][3]} ‚Äî {val[5][4]} [{val[5][5]}]\n{val[6][3]} ‚Äî {val[6][4]} [{val[6][5]}]\n{val[7][3]} ‚Äî {val[7][4]} [{val[7][5]}]\n{val[8][3]} ‚Äî {val[8][4]} [{val[8][5]}]'
    elif val[0][4] == "9":
        orders = f'{val[1][3]} ‚Äî {val[1][4]} [{val[1][5]}]\n{val[2][3]} ‚Äî {val[2][4]} [{val[2][5]}]\n{val[3][3]} ‚Äî {val[3][4]} [{val[3][5]}]\n{val[4][3]} ‚Äî {val[4][4]} [{val[4][5]}]\n{val[5][3]} ‚Äî {val[5][4]} [{val[5][5]}]\n{val[6][3]} ‚Äî {val[6][4]} [{val[6][5]}]\n{val[7][3]} ‚Äî {val[7][4]} [{val[7][5]}]\n{val[8][3]} ‚Äî {val[8][4]} [{val[8][5]}]\n{val[9][3]} ‚Äî {val[9][4]} [{val[9][5]}]'
    elif val[0][4] == "10":
        orders = f'{val[1][3]} ‚Äî {val[1][4]} [{val[1][5]}]\n{val[2][3]} ‚Äî {val[2][4]} [{val[2][5]}]\n{val[3][3]} ‚Äî {val[3][4]} [{val[3][5]}]\n{val[4][3]} ‚Äî {val[4][4]} [{val[4][5]}]\n{val[5][3]} ‚Äî {val[5][4]} [{val[5][5]}]\n{val[6][3]} ‚Äî {val[6][4]} [{val[6][5]}]\n{val[7][3]} ‚Äî {val[7][4]} [{val[7][5]}]\n{val[8][3]} ‚Äî {val[8][4]} [{val[8][5]}]\n{val[9][3]} ‚Äî {val[9][4]} [{val[9][5]}]\n{val[10][3]} ‚Äî {val[10][4]} [{val[10][5]}]'
    text = (
        f'–°–æ–±–∏—Ä–∞—é—Ç—Å—è:\n'
        f'{orders}\n\n'
        f'–°–æ–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:'
    )
    if val[0][1] == "1":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                ],
        ]
    elif val[0][1] == "2":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
        ]
    elif val[0][1] == "3":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                ],
        ]
    elif val[0][1] == "4":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
        ]
    elif val[0][1] == "5":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                ],
        ]
    elif val[0][1] == "6":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
        ]
    elif val[0][1] == "7":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                ],
        ]
    elif val[0][1] == "8":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                    InlineKeyboardButton(f'{val[8][0]} ‚Äî {val[8][2]}', callback_data=str(f'{val[8][0]}')),
                ],
        ]
    elif val[0][1] == "9":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                    InlineKeyboardButton(f'{val[8][0]} ‚Äî {val[8][2]}', callback_data=str(f'{val[8][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[9][0]} ‚Äî {val[9][2]}', callback_data=str(f'{val[9][0]}')),
                ],
        ]
    elif val[0][1] == "10":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                    InlineKeyboardButton(f'{val[8][0]} ‚Äî {val[8][2]}', callback_data=str(f'{val[8][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[9][0]} ‚Äî {val[9][2]}', callback_data=str(f'{val[9][0]}')),
                    InlineKeyboardButton(f'{val[10][0]} ‚Äî {val[10][2]}', callback_data=str(f'{val[10][0]}')),
                ],
        ]
    elif val[0][1] == "11":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                    InlineKeyboardButton(f'{val[8][0]} ‚Äî {val[8][2]}', callback_data=str(f'{val[8][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[9][0]} ‚Äî {val[9][2]}', callback_data=str(f'{val[9][0]}')),
                    InlineKeyboardButton(f'{val[10][0]} ‚Äî {val[10][2]}', callback_data=str(f'{val[10][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[11][0]} ‚Äî {val[11][2]}', callback_data=str(f'{val[11][0]}')),
                ],
        ]
    elif val[0][1] == "12":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                    InlineKeyboardButton(f'{val[8][0]} ‚Äî {val[8][2]}', callback_data=str(f'{val[8][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[9][0]} ‚Äî {val[9][2]}', callback_data=str(f'{val[9][0]}')),
                    InlineKeyboardButton(f'{val[10][0]} ‚Äî {val[10][2]}', callback_data=str(f'{val[10][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[11][0]} ‚Äî {val[11][2]}', callback_data=str(f'{val[11][0]}')),
                    InlineKeyboardButton(f'{val[12][0]} ‚Äî {val[12][2]}', callback_data=str(f'{val[12][0]}')),
                ],
        ]
    elif val[0][1] == "13":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                    InlineKeyboardButton(f'{val[8][0]} ‚Äî {val[8][2]}', callback_data=str(f'{val[8][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[9][0]} ‚Äî {val[9][2]}', callback_data=str(f'{val[9][0]}')),
                    InlineKeyboardButton(f'{val[10][0]} ‚Äî {val[10][2]}', callback_data=str(f'{val[10][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[11][0]} ‚Äî {val[11][2]}', callback_data=str(f'{val[11][0]}')),
                    InlineKeyboardButton(f'{val[12][0]} ‚Äî {val[12][2]}', callback_data=str(f'{val[12][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[13][0]} ‚Äî {val[13][2]}', callback_data=str(f'{val[13][0]}')),
                ],
        ]
    elif val[0][1] == "14":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                    InlineKeyboardButton(f'{val[8][0]} ‚Äî {val[8][2]}', callback_data=str(f'{val[8][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[9][0]} ‚Äî {val[9][2]}', callback_data=str(f'{val[9][0]}')),
                    InlineKeyboardButton(f'{val[10][0]} ‚Äî {val[10][2]}', callback_data=str(f'{val[10][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[11][0]} ‚Äî {val[11][2]}', callback_data=str(f'{val[11][0]}')),
                    InlineKeyboardButton(f'{val[12][0]} ‚Äî {val[12][2]}', callback_data=str(f'{val[12][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[13][0]} ‚Äî {val[13][2]}', callback_data=str(f'{val[13][0]}')),
                    InlineKeyboardButton(f'{val[14][0]} ‚Äî {val[14][2]}', callback_data=str(f'{val[14][0]}')),
                ],
        ]
    elif val[0][1] == "15":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                    InlineKeyboardButton(f'{val[8][0]} ‚Äî {val[8][2]}', callback_data=str(f'{val[8][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[9][0]} ‚Äî {val[9][2]}', callback_data=str(f'{val[9][0]}')),
                    InlineKeyboardButton(f'{val[10][0]} ‚Äî {val[10][2]}', callback_data=str(f'{val[10][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[11][0]} ‚Äî {val[11][2]}', callback_data=str(f'{val[11][0]}')),
                    InlineKeyboardButton(f'{val[12][0]} ‚Äî {val[12][2]}', callback_data=str(f'{val[12][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[13][0]} ‚Äî {val[13][2]}', callback_data=str(f'{val[13][0]}')),
                    InlineKeyboardButton(f'{val[14][0]} ‚Äî {val[14][2]}', callback_data=str(f'{val[14][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[15][0]} ‚Äî {val[15][2]}', callback_data=str(f'{val[15][0]}')),
                ],
        ]
    elif val[0][1] == "16":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                    InlineKeyboardButton(f'{val[8][0]} ‚Äî {val[8][2]}', callback_data=str(f'{val[8][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[9][0]} ‚Äî {val[9][2]}', callback_data=str(f'{val[9][0]}')),
                    InlineKeyboardButton(f'{val[10][0]} ‚Äî {val[10][2]}', callback_data=str(f'{val[10][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[11][0]} ‚Äî {val[11][2]}', callback_data=str(f'{val[11][0]}')),
                    InlineKeyboardButton(f'{val[12][0]} ‚Äî {val[12][2]}', callback_data=str(f'{val[12][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[13][0]} ‚Äî {val[13][2]}', callback_data=str(f'{val[13][0]}')),
                    InlineKeyboardButton(f'{val[14][0]} ‚Äî {val[14][2]}', callback_data=str(f'{val[14][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[15][0]} ‚Äî {val[15][2]}', callback_data=str(f'{val[15][0]}')),
                    InlineKeyboardButton(f'{val[16][0]} ‚Äî {val[16][2]}', callback_data=str(f'{val[16][0]}')),
                ],
        ]
    elif val[0][1] == "17":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                    InlineKeyboardButton(f'{val[8][0]} ‚Äî {val[8][2]}', callback_data=str(f'{val[8][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[9][0]} ‚Äî {val[9][2]}', callback_data=str(f'{val[9][0]}')),
                    InlineKeyboardButton(f'{val[10][0]} ‚Äî {val[10][2]}', callback_data=str(f'{val[10][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[11][0]} ‚Äî {val[11][2]}', callback_data=str(f'{val[11][0]}')),
                    InlineKeyboardButton(f'{val[12][0]} ‚Äî {val[12][2]}', callback_data=str(f'{val[12][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[13][0]} ‚Äî {val[13][2]}', callback_data=str(f'{val[13][0]}')),
                    InlineKeyboardButton(f'{val[14][0]} ‚Äî {val[14][2]}', callback_data=str(f'{val[14][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[15][0]} ‚Äî {val[15][2]}', callback_data=str(f'{val[15][0]}')),
                    InlineKeyboardButton(f'{val[16][0]} ‚Äî {val[16][2]}', callback_data=str(f'{val[16][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[17][0]} ‚Äî {val[17][2]}', callback_data=str(f'{val[17][0]}')),
                ],
        ]
    elif val[0][1] == "18":
        keyboard = [
                [
                    InlineKeyboardButton(f'{val[1][0]} ‚Äî {val[1][2]}', callback_data=str(f'{val[1][0]}')),
                    InlineKeyboardButton(f'{val[2][0]} ‚Äî {val[2][2]}', callback_data=str(f'{val[2][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[3][0]} ‚Äî {val[3][2]}', callback_data=str(f'{val[3][0]}')),
                    InlineKeyboardButton(f'{val[4][0]} ‚Äî {val[4][2]}', callback_data=str(f'{val[4][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[5][0]} ‚Äî {val[5][2]}', callback_data=str(f'{val[5][0]}')),
                    InlineKeyboardButton(f'{val[6][0]} ‚Äî {val[6][2]}', callback_data=str(f'{val[6][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[7][0]} ‚Äî {val[7][2]}', callback_data=str(f'{val[7][0]}')),
                    InlineKeyboardButton(f'{val[8][0]} ‚Äî {val[8][2]}', callback_data=str(f'{val[8][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[9][0]} ‚Äî {val[9][2]}', callback_data=str(f'{val[9][0]}')),
                    InlineKeyboardButton(f'{val[10][0]} ‚Äî {val[10][2]}', callback_data=str(f'{val[10][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[11][0]} ‚Äî {val[11][2]}', callback_data=str(f'{val[11][0]}')),
                    InlineKeyboardButton(f'{val[12][0]} ‚Äî {val[12][2]}', callback_data=str(f'{val[12][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[13][0]} ‚Äî {val[13][2]}', callback_data=str(f'{val[13][0]}')),
                    InlineKeyboardButton(f'{val[14][0]} ‚Äî {val[14][2]}', callback_data=str(f'{val[14][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[15][0]} ‚Äî {val[15][2]}', callback_data=str(f'{val[15][0]}')),
                    InlineKeyboardButton(f'{val[16][0]} ‚Äî {val[16][2]}', callback_data=str(f'{val[16][0]}')),
                ],
                [
                    InlineKeyboardButton(f'{val[17][0]} ‚Äî {val[17][2]}', callback_data=str(f'{val[17][0]}')),
                    InlineKeyboardButton(f'{val[18][0]} ‚Äî {val[18][2]}', callback_data=str(f'{val[18][0]}')),
                ],
        ]
    if val[0][1] == "0":
        bot.send_message(ADMIN_CHAT, text)
    else:
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_message(ADMIN_CHAT, text, reply_markup=reply_markup)


# –û—Ç–º–µ—á–∞–µ–º –≤—ã–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
def admin_done(update: Update, context: CallbackContext) -> None:
    dt = update.callback_query
    bot.send_message(ADMIN_CHAT, text=f'dtd{dt}')
    update.callback_query.answer()
    torder = re.compile(r'\d{6}[-]%s' % (update.callback_query.data))
    scan = worksheet.findall(torder)[-1] # –∏—â–µ–º –∑–∞–∫–∞–∑
    worksheet.update_cell(scan.row, 10, "–í—ã–¥–∞–Ω")
    admin_reload(update, context)


# –ö–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç –º—è—É
def talk(update: Update, context: CallbackContext) -> None:
    random_message = lambda: random.choice(cat.talk)
    random_voice = lambda: random.choice(cat.tvoice_cat)
    random_sticker = lambda: random.choice(cat.sticker_cat)
    stat = lambda: random.choice(['1','2','3'])
    if stat() == "1":
        update.message.reply_text(random_message())
    elif stat() == "2":
        update.message.reply_voice(open(pathlib.Path('voice', random_voice()), 'rb'))
    else:
        update.message.reply_sticker(sticker=random_sticker())


# –ö–æ—Ç —à–∏–ø–∏—Ç
def test_voice(update: Update, context: CallbackContext) -> None:
    random_voice = lambda: random.choice(cat.tvoice_cat)
    duration = int = None
    update.message.reply_voice(open(pathlib.Path('voice', random_voice()), 'rb'))


# –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∫—É
def callback_reload(update: Update, context: CallbackContext) -> None:
    admin_reload(update, context)


# –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∫—É
def id(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(update.effective_message.chat.id)


# –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∫—É
def test(update: Update, context: CallbackContext) -> None:
    try:
        update.callback_query.data
    except:
        text = "–∏—Å–∫–ª—é—á–Ω–∏–µ"
        update.message.reply_text(f'—Ç–µ–∫—Å—Ç{text}')
    else:
        text = "–∏–ª–∏"
        update.effective_message.reply_text(f'—Ç–µ–∫—Å—Ç{text}')


# –ö–æ—Ç —à–∏–ø–∏—Ç
def woof(update: Update, context: CallbackContext) -> None:
    random_voice = lambda: random.choice(cat.shh_cat)
    update.message.reply_voice(open(random_voice(), 'rb'))


def error_handler(update: object, context: CallbackContext) -> None:
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = ''.join(tb_list)

    # Build the message with some markup and additional information about what happened.
    # You might need to add some logic to deal with messages longer than the 4096 character limit.
    update_str = update.to_dict() if isinstance(update, Update) else str(update)
    message = (
        f'An exception was raised while handling an update\n'
        f'<pre>update = {html.escape(json.dumps(update_str, indent=2, ensure_ascii=False))}'
        '</pre>\n\n'
        f'<pre>context.chat_data = {html.escape(str(context.chat_data))}</pre>\n\n'
        f'<pre>context.user_data = {html.escape(str(context.user_data))}</pre>\n\n'
        f'<pre>{html.escape(tb_string)}</pre>'
    )

    # Finally, send the message
    context.bot.send_message(chat_id=ADMIN_CHAT, text=message, parse_mode=ParseMode.HTML)


def main() -> None:
    persistence = PicklePersistence(filename='conversationbot')
    updater = Updater(TOKEN, persistence=persistence)
    dispatcher = updater.dispatcher

    # –°–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –∏ –º—è–≤–∫–∞–µ—Ç –≤ –æ—Ç–≤–µ—Ç
    dispatcher.add_handler(MessageHandler(Filters.regex(cat.listen_talk) & ~Filters.regex('\d{6}-\d{6}') & ~Filters.regex('(–Ø–Ω–¥–µ–∫—Å|—è–Ω–¥–µ–∫—Å|–§—É–¥—Ñ–æ–∫—Å|—Ñ—É–¥—Ñ–æ–∫—Å)'), talk))
    dispatcher.add_handler(MessageHandler(Filters.regex(cat.listen_woof) & ~Filters.regex('\d{6}-\d{6}'), woof))

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('stat', stat))
    dispatcher.add_handler(CommandHandler('reload', callback_reload))
    dispatcher.add_handler(CommandHandler('id', id))
    dispatcher.add_handler(CommandHandler('test_voice', test_voice))

    dispatcher.add_handler(MessageHandler(Filters.regex('—Ç–µ—Å—Ç'), test))

    # –°–ª—É—à–∞–µ—Ç —á–∞—Ç —Å–±–æ—Ä–∫–∏ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('\d{6}-\d{6}') & ~Filters.chat(SBOR_CHAT), order_user)],
        states={
            DELETE: [
                MessageHandler(Filters.regex('^\d{,2}$') & ~Filters.regex('\d{6}-\d{6}') & ~Filters.regex('^[+]\d{,2}$'), delete_answer),
                MessageHandler(Filters.text & ~Filters.regex('^\d{,2}$') & ~Filters.regex('\d{6}-\d{6}') & ~Filters.regex('^[+]\d{,2}$'), error_answer),
                MessageHandler(Filters.regex('\d{6}-\d{6}'), error_order),
                MessageHandler(Filters.regex('^[+]\d{,2}$') & ~Filters.regex('^\d{,2}$') & ~Filters.regex('\d{6}-\d{6}'), add_min),
                CallbackQueryHandler(delete_answer, pattern='^' + str('\d{1}') + '$'),
                CallbackQueryHandler(add_pos, pattern='^' + str('add_pos') + '$'),
                CallbackQueryHandler(test, pattern='^' + str('cancel_order') + '$'),
                MessageHandler(Filters.photo, done_photo),
            ],
            ADD: [
                MessageHandler(Filters.regex('^\d{,2}$') & ~Filters.regex('\d{6}-\d{6}') & ~Filters.regex('^[+]\d{,2}$'), add_answer),
                MessageHandler(~Filters.regex('^\d{,2}$'), error_add),
                CallbackQueryHandler(delete_back, pattern='^' + str('delete_back') + '$'),
            ],
            DONE: [
                MessageHandler(Filters.photo, done),
                MessageHandler(Filters.regex('\d{6}-\d{6}'), error_done),
                CallbackQueryHandler(delete_back, pattern='^' + str('delete_back') + '$'),
            ],
        },
        fallbacks=[MessageHandler(Filters.regex('(–û—Ç–º–µ–Ω–∞|–æ—Ç–º–µ–Ω–∞|–û—Ç–º–µ–Ω—è–µ—Ç—Å—è|–æ—Ç–º–µ–Ω—è–µ—Ç—Å—è|–û—Ç–º–µ–Ω–µ–Ω|–æ—Ç–º–µ–Ω–µ–Ω|–û—Ç–º–µ–Ω—ë–Ω|–æ—Ç–º–µ–Ω—ë–Ω|–û—Ç–º–µ–Ω–∏—Ç—Å—è|–æ—Ç–º–µ–Ω–∏—Ç—Å—è)'), stop)],
    )


    dispatcher.add_handler(CallbackQueryHandler(admin_done, pattern='^' + str('\d{6}') + '$'))
    dispatcher.add_error_handler(error_handler)

    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
