from telegram import Update, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import CallbackContext

import logging
import html
import json
import traceback

from config import DEV_CHAT, ORDER_DELETE, ORDER_ADD, ORDER_DONE
from keyboards import keyboard_change, keyboard_delete


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏—Å–ª–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–¥–∞–ª–µ–Ω–∏—è—Ö
async def error_answer(update: Update, context: CallbackContext) -> None:
    text = (
        f'–Ø –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å, —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–∏–π üòø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –∫–Ω–æ–ø–∫–µ, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–∏–π —Ü–∏—Ñ—Ä–æ–π.'
    )
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard_delete))

    return ORDER_DELETE


# –°–∫–∏–Ω—É–ª–∏ –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–¥–∞–ª–µ–Ω–∏–π
async def error_order(update: Update, context: CallbackContext) -> None:
    text = (
        f'–¢—ã –ø—Ä–∏—Å—ã–ª–∞–µ—à—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ üòø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–∏–π –ø–æ –ø—Ä–æ—à–ª–æ–º—É –∑–∞–∫–∞–∑—É, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.'
    )
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard_delete))

    return ORDER_DELETE


# –°–∫–∏–Ω—É–ª–∏ –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–æ —á–µ–∫–∞
async def error_done(update: Update, context: CallbackContext) -> None:
    text = (
        f'–¢—ã –ø—Ä–∏—Å—ã–ª–∞–µ—à—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ üòø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞. –ù–µ –∑–∞–±—ã–≤–∞–π —ç—Ç–æ –¥–µ–ª–∞—Ç—å –≤–æ–≤—Ä–µ–º—è, –∏–Ω–∞—á–µ —è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É :('
    )
    reply_markup = InlineKeyboardMarkup(keyboard_change)
    await update.message.reply_text(text, reply_markup=reply_markup)

    return ORDER_DONE


# –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
async def error_add(update: Update, context: CallbackContext) -> None:
    text = (
        f'–Ø –Ω–µ –ø–æ–Ω—è–ª —Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π —É —Ç–µ–±—è –¥–æ–±–∞–≤–∏–ª–æ—Å—å üòø'
        f'–ü—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–∫–æ–ª—å–∫–æ –∏—Ö —É —Ç–µ–±—è'
    )
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard_change))

    return ORDER_ADD


async def error_handler(update: object, context: CallbackContext) -> None:
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    logging.getLogger(__name__).error(msg="Exception while handling an update:", exc_info=context.error)
    
    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = ''.join(tb_list)

    # Build the message with some markup and additional information about what happened.
    # You might need to add some logic to deal with messages longer than the 4096 character limit.
    update_str = update.to_dict() if isinstance(update, Update) else str(update)
    message = (
        f'An exception was raised while handling an update\n'
        f'<pre>update = {html.escape(json.dumps(update_str, indent=2, ensure_ascii=False))}'
        '</pre>\n\n'
        f'<pre>context.chat_data = {html.escape(str(context.chat_data))}</pre>\n\n'
        f'<pre>context.user_data = {html.escape(str(context.user_data))}</pre>\n\n'
        f'<pre>{html.escape(tb_string)}</pre>'
        )
    try:
        # Finally, send the message
        await context.bot.send_message(chat_id=DEV_CHAT, text=message, parse_mode=ParseMode.HTML)
    except:
        await context.bot.send_message(chat_id=DEV_CHAT, text='–û—à–∏–±–∫–∞ –≤ –æ—à–∏–±–∫–µ :(')