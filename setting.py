from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext, ConversationHandler

from config import statsheet, leadersheet, SETTING, SETTING_NAME_DONE, SETTING_LEADERBOARD_ANSWER
from keyboards import keyboard_setting


async def setting_user(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    try:
        query.data
    except:
        update = update.message
    else:
        await query.answer()
        update = query.message
    text = (
        f'–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è.'
    )
    await update.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard_setting))

    return SETTING


async def setting_edit_name(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    text = (
        f'–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?'
    )
    keyboard_setting_back = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str('setting_user'))]]
    await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard_setting_back))

    return SETTING_NAME_DONE


async def setting_edit_name_error(update: Update, context: CallbackContext) -> None:
    text = (
        f'–ù–µ –ø–æ–Ω—è–ª :('
    )
    await update.message.reply_text(text)

    return SETTING_NAME_DONE


async def setting_edit_name_done(update: Update, context: CallbackContext) -> None:
    update = update.message
    name = update.text
    
    try:
        statsheet.find(name)
    except:
        user = update.from_user.username
        text = (
            f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}'
        )
        await update.reply_text(text)
        scan = statsheet.find(user) # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
        statsheet.update_cell(2, scan.col, name)
        RETURNED = ConversationHandler.END
    else: 
        text = (
            f'–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–µ'
        )
        await update.reply_text(text)
        RETURNED = SETTING_NAME_DONE

    return RETURNED


async def setting_leaderboard(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    user = query.message.chat.username
    
    text = (
        f'–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–∏—Ç—ã–≤–∞–ª–∏—Å—å '
        f'–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö, —Ç–æ –º–æ–∂–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n\n'
        f'_–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∑–∞–ø—Ä–µ—Ç–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Ç–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ _'
        f'_–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –∞ —Ç–∞–∫ –∂–µ –æ—Ç–∫–ª—é—á–∏—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã._'
    )
    
    scan = leadersheet.find(user)
    val = leadersheet.cell(scan.row, scan.col-1).value
    
    if val == '0':
        toggle = '–í–∫–ª—é—á–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–∞—Ö'
        toggle_callback = 'leaderboard_on'
    else:
        toggle = '–í—ã–∫–ª—é—á–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–∞—Ö'
        toggle_callback = 'leaderboard_off'
    
    keyboard_setting_leaderboard = [
        [InlineKeyboardButton(f'{toggle}', callback_data=str(toggle_callback))],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str('setting_user'))],
    ]
    
    await query.message.reply_text(text, parse_mode='markdown', reply_markup=InlineKeyboardMarkup(keyboard_setting_leaderboard))

    return SETTING_LEADERBOARD_ANSWER


async def setting_leaderboard_answer(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    user = query.message.chat.username
    scan = leadersheet.find(user)
    
    toggle_callback = query.data
    
    if toggle_callback == 'leaderboard_on':
        text = '–£—á–∞—Å—Ç–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ ‚ú®'
        leadersheet.update_cell(scan.row, scan.col-1, '1')
    else:
        text = '–£—á–∞—Å—Ç–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ üòø'
        leadersheet.update_cell(scan.row, scan.col-1, '0')

    await query.message.reply_text(text, parse_mode='markdown')

    return ConversationHandler.END